// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role
  courses   Course[]  @relation("EducatorCourses")
  enrollments Enrollment[]
  attendances  Attendance[]
}

enum Role {
  STUDENT
  EDUCATOR
  ADMIN
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  videoUrl    String?    
  imgUrl      String?    
  status      CourseStatus @default(DRAFT)

  educator    User       @relation("EducatorCourses", fields: [educatorId], references: [id])
  educatorId  Int
  createdAt   DateTime   @default(now())
  chapters    Chapter[]
  enrollments Enrollment[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Chapter {
  id        Int     @id @default(autoincrement())
  chapNum   Int?
  title     String
  content   String
  status    ChapterStatus @default(DRAFT)
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChapterStatus {
  DRAFT
  PUBLISHED
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())

  @@unique([userId, courseId]) // Prevent duplicate enrollments
}


model Attendance {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime @default(now())
  isPresent  Boolean  @default(true)
  @@unique([userId, date]) // prevent duplicates for the same day
}